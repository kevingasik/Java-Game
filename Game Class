//____________________________________________________________________________________________________________________
//Game Class
//___________________________________________________________________________________________________________________

package com.tutorial.main;

import java.awt.Canvas;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.image.BufferStrategy;
import java.util.Random;

public class Game extends Canvas implements Runnable{
 
	private static final long serialVersionUID = 1550691097823471818L;
	
	public static final int WIDTH = 1280, HEIGHT = WIDTH/12*9;
	
	private Thread thread;
	private boolean running = false;
	public int diff = 0 ;
	// 0 = normal 1 = hard
	private Random r;
	private Handler handler;
	private HUD hud;
	private Spawn spawner; 
	private Menu menu;
	public static boolean paused = false; 
	
	public enum STATE{
		Menu,
		Select,
		Help,
		Game,
		End
	};
	public STATE gameState = STATE.Menu;
	
	
	public Game(){
		
		hud = new HUD(); 
		handler = new Handler();
		menu = new Menu(this, handler, hud);
		this.addKeyListener(new KeyInput(handler, this));
		this.addMouseListener(menu);
		
		AudioPlayer.load();
		AudioPlayer.getMusic("music").loop();
		
		new Window(WIDTH, HEIGHT, "Let's Build a Game!", this);
		
		r = new Random();
		spawner = new Spawn(handler, hud, this);
		
		
		if(gameState == STATE.Game){
			handler.addObject(new Player((WIDTH/2)- 32, r.nextInt(HEIGHT)-32, ID.Player, handler));
		
		}else{ 
			for(int i = 0; i < 10; i++){ 
				handler.addObject(new MenuParticle(r.nextInt(WIDTH),r.nextInt(HEIGHT),ID.MenuParticle, handler));
			}
			
		}
		
	}
	
	public synchronized void start(){ 
		thread = new Thread(this);
		thread.start();
		running = true;
	}
	
	public synchronized void stop(){ 
		try{ 
			thread.join();
			running = false;
		}catch(Exception e){ 
			e.printStackTrace();
		}
	}
	
	public void run(){ 
		long lastTime = System.nanoTime();
		double amountOfTicks = 60.0;
		double ns = 1000000000 / amountOfTicks;
		double delta = 0;
		long timer = System.currentTimeMillis();
		int frames = 0;
		while(running){
			long now = System.nanoTime();
			delta += (now-lastTime) / ns; 
			lastTime = now; 
			while(delta >= 1){ 
				tick();
				delta--;
			}
			
			if(running)
				render();
			frames++; 
			
			if(System.currentTimeMillis()- timer > 1000){ 
				timer +=1000; 
				System.out.println("FPS: " + frames);
				frames = 0;
			}
		}
		stop(); 
		
	}
	
	private void tick(){
	
		
		
		if(gameState == STATE.Game)
		{
			if(!paused)
			{ 
				hud.tick();
				spawner.tick();
				handler.tick();
			
			
			if(HUD.HEALTH <= 0){ 
				HUD.HEALTH = 100;
				handler.clearEnemys(); 
				gameState = STATE.End;
				for(int i = 0; i < 10; i++){ 
					handler.addObject(new MenuParticle(r.nextInt(WIDTH),r.nextInt(HEIGHT),ID.MenuParticle, handler));
				}
			} 
				
			};
		}else if(gameState == STATE.Menu || gameState == STATE.End || gameState == STATE.Select){ 
			menu.tick();
			handler.tick();
		}
	}
	
	private void render(){ 
		this.requestFocus();
		BufferStrategy bs = this.getBufferStrategy();
		if(bs == null){ 
			this.createBufferStrategy(3);
			return;
		}
		Graphics g = bs.getDrawGraphics();
		g.setColor(Color.black);
		g.fillRect(0,0,WIDTH,HEIGHT);
		
		handler.render(g);
		if(paused){ 
			Font fnt6 = new Font("arial", 1, 50);
			
			g.setFont(fnt6);
			g.drawString("Paused", 220, 150);
		}
		if(gameState == STATE.Game)
		{
			hud.render(g);
		}else if(gameState == STATE.Menu || gameState == STATE.Help  || gameState == STATE.End || gameState == STATE.Select){ 
			menu.render(g);
		}
		
		g.dispose();
		bs.show();
	}
	
	public static float clamp(float var, float min, float max){ 
		if(var >= max)
			return var = max; 
		else if(var <= min)
			return var = min;
		else
			return var; 
	}
	
	public static void main(String args[]){ 
		new Game();
	}
}
